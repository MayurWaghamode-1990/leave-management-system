// This is your Prisma schema file for MySQL
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User and Employee Models
model User {
  id                String    @id @default(cuid())
  employeeId        String    @unique
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              String    @default("EMPLOYEE")
  department        String
  location          String
  reportingManagerId String?
  joiningDate       DateTime  @default(now())
  status            String    @default("ACTIVE")
  lastLogin         DateTime?
  gender            String?   // MALE, FEMALE, OTHER
  maritalStatus     String?   // SINGLE, MARRIED, DIVORCED, WIDOWED
  country           String?   // USA, INDIA - for region-specific leave policies
  designation       String?   // AVP, VP, MANAGER, SENIOR_MANAGER, etc. - for USA PTO policies

  // Relations
  reportingManager  User?     @relation("UserHierarchy", fields: [reportingManagerId], references: [id])
  directReports     User[]    @relation("UserHierarchy")
  managedDepartment Department[] @relation("DepartmentManager")
  leaveRequests     LeaveRequest[]
  leaveBalances     LeaveBalance[]
  approvals         Approval[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  automationRules   AutomationRule[]
  cancellationRequests LeaveCancellationRequest[] @relation("CancellationRequests")
  cancellationApprovals LeaveCancellationRequest[] @relation("CancellationApprovals")
  modificationRequests LeaveModificationRequest[] @relation("ModificationRequests")
  modificationApprovals LeaveModificationRequest[] @relation("ModificationApprovals")
  leaveTemplates       LeaveTemplate[]
  calendarIntegrations CalendarIntegration[]
  monthlyAccruals      MonthlyAccrual[] @relation("MonthlyAccruals")
  compOffWorkLogs      CompOffWorkLog[] @relation("CompOffWorkLogs")
  compOffVerifications CompOffWorkLog[] @relation("CompOffVerifications")
  compOffRequests      CompOffRequest[] @relation("CompOffRequests")
  compOffApprovals     CompOffApproval[] @relation("CompOffApprovals")
  compOffBalances      CompOffBalance[] @relation("CompOffBalances")

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([reportingManagerId])
  @@index([role])
  @@index([location])
  @@index([department])
  @@map("users")
}

model Department {
  id                    String    @id @default(cuid())
  name                  String
  managerId             String?
  parentDepartmentId    String?
  location              String

  // Relations
  manager               User?     @relation("DepartmentManager", fields: [managerId], references: [id])
  parentDepartment      Department? @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  childDepartments      Department[] @relation("DepartmentHierarchy")

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("departments")
}

// Leave Models
model LeaveRequest {
  id              String        @id @default(cuid())
  employeeId      String
  leaveType       String
  startDate       DateTime
  endDate         DateTime
  totalDays       Float
  isHalfDay       Boolean       @default(false)
  halfDayPeriod   String?       // FIRST_HALF, SECOND_HALF (only applicable when isHalfDay is true)
  reason          String
  attachments     String?
  status          String        @default("PENDING")
  appliedDate     DateTime      @default(now())
  googleCalendarEventId String?
  outlookCalendarEventId String?

  // Relations
  employee        User          @relation(fields: [employeeId], references: [id])
  approvals       Approval[]
  cancellationRequests LeaveCancellationRequest[]
  modificationRequests LeaveModificationRequest[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Performance indexes for frequently queried fields
  @@index([status])
  @@index([appliedDate])
  @@index([employeeId, status])
  @@index([leaveType])
  @@index([startDate, endDate])
  @@map("leave_requests")
}

model Approval {
  id              String          @id @default(cuid())
  leaveRequestId  String
  approverId      String
  level           Int             @default(1)
  status          String          @default("PENDING")
  comments        String?
  approvedAt      DateTime?

  // Relations
  leaveRequest    LeaveRequest    @relation(fields: [leaveRequestId], references: [id])
  approver        User            @relation(fields: [approverId], references: [id])

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([leaveRequestId, level])
  @@index([status])
  @@index([approverId, status])
  @@map("approvals")
}

model LeaveBalance {
  id                  String      @id @default(cuid())
  employeeId          String
  leaveType           String
  totalEntitlement    Float
  used                Float       @default(0)
  available           Float
  carryForward        Float       @default(0)
  year                Int

  // Relations
  employee            User        @relation(fields: [employeeId], references: [id])

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@unique([employeeId, leaveType, year])
  @@index([employeeId])
  @@index([leaveType])
  @@index([year])
  @@map("leave_balances")
}

model LeavePolicy {
  id                    String    @id @default(cuid())
  name                  String
  leaveType             String
  entitlementDays       Float
  accrualRate           Float     @default(1.0)
  maxCarryForward       Float     @default(0)
  minimumGap            Int       @default(0)
  maxConsecutiveDays    Int       @default(365)
  requiresDocumentation Boolean   @default(false)
  documentationThreshold Int      @default(0)
  location              String
  region                String    @default("INDIA")
  effectiveFrom         DateTime
  effectiveTo           DateTime?
  isActive              Boolean   @default(true)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("leave_policies")
}

// Calendar and Holiday Models
model Holiday {
  id          String      @id @default(cuid())
  name        String
  date        DateTime
  location    String
  region      String      @default("INDIA")
  isOptional  Boolean     @default(false)
  type        String      @default("COMPANY")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("holidays")
}

// Leave Template Model
model LeaveTemplate {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    String      @default("PERSONAL")

  // Template data
  leaveType   String
  duration    Int?        // Number of days (null for variable duration)
  reason      String
  isHalfDay   Boolean     @default(false)

  // Sharing and visibility
  isPublic    Boolean     @default(false)
  isActive    Boolean     @default(true)
  usageCount  Int         @default(0)

  // Owner information
  createdBy   String
  owner       User        @relation(fields: [createdBy], references: [id])

  // Tags for better categorization
  tags        String?     // JSON array of tags

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("leave_templates")
}

// Notification Model
model Notification {
  id          String            @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  isRead      Boolean           @default(false)
  metadata    String?

  // Relations
  user        User              @relation(fields: [userId], references: [id])

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("notifications")
}

// Audit and Logging Models
model AuditLog {
  id          String      @id @default(cuid())
  userId      String?
  entity      String
  entityId    String
  action      String
  oldValues   String?
  newValues   String?
  ipAddress   String?
  userAgent   String?

  // Relations
  user        User?       @relation(fields: [userId], references: [id])

  createdAt   DateTime    @default(now())

  @@map("audit_logs")
}

// Regional Policy Model
model RegionalPolicy {
  id          String    @id @default(cuid())
  region      String
  state       String?
  policyRules String
  isActive    Boolean   @default(true)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("regional_policies")
}

// Automation Rules Models
model AutomationRule {
  id              String    @id @default(cuid())
  name            String
  description     String?
  enabled         Boolean   @default(true)
  priority        Int       @default(1)
  triggerType     String    // 'LEAVE_REQUEST', 'APPROVAL_PENDING', etc.
  triggerConditions String  // JSON string of conditions
  actions         String    // JSON string of actions
  validationRules String?   // JSON string of validation rules
  createdBy       String
  lastExecuted    DateTime?
  executionCount  Int       @default(0)

  // Relations
  creator         User      @relation(fields: [createdBy], references: [id])
  executions      RuleExecution[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("automation_rules")
}

model RuleExecution {
  id              String    @id @default(cuid())
  ruleId          String
  triggerContext  String    // JSON string of execution context
  result          String    // JSON string of execution result
  success         Boolean
  executionTime   Int       // milliseconds
  actionsExecuted String    // JSON string of executed actions
  errors          String?   // JSON string of errors if any

  // Relations
  rule            AutomationRule @relation(fields: [ruleId], references: [id])

  createdAt       DateTime  @default(now())

  @@map("rule_executions")
}

// Advanced Leave Request Models
model LeaveCancellationRequest {
  id                String    @id @default(cuid())
  leaveRequestId    String
  employeeId        String
  cancellationReason String
  status            String    @default("PENDING") // PENDING, APPROVED, REJECTED
  appliedDate       DateTime  @default(now())
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?

  // Relations
  leaveRequest      LeaveRequest @relation(fields: [leaveRequestId], references: [id])
  employee          User         @relation("CancellationRequests", fields: [employeeId], references: [id])
  approver          User?        @relation("CancellationApprovals", fields: [approvedBy], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("leave_cancellation_requests")
}

model LeaveModificationRequest {
  id                String    @id @default(cuid())
  originalLeaveId   String
  employeeId        String
  newStartDate      DateTime?
  newEndDate        DateTime?
  newLeaveType      String?
  newReason         String?
  modificationReason String
  status            String    @default("PENDING") // PENDING, APPROVED, REJECTED
  appliedDate       DateTime  @default(now())
  approvedBy        String?
  approvedAt        DateTime?
  rejectionReason   String?

  // Relations
  originalLeave     LeaveRequest @relation(fields: [originalLeaveId], references: [id])
  employee          User         @relation("ModificationRequests", fields: [employeeId], references: [id])
  approver          User?        @relation("ModificationApprovals", fields: [approvedBy], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("leave_modification_requests")
}

// Calendar Integration Model
model CalendarIntegration {
  id           String   @id @default(cuid())
  userId       String
  provider     String   // 'google' or 'outlook'
  accessToken  String
  refreshToken String?
  calendarId   String?
  enabled      Boolean  @default(true)

  // Relations
  user         User     @relation(fields: [userId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, provider], name: "userId_provider")
  @@map("calendar_integrations")
}

// Monthly Accrual Tracking Model for India
model MonthlyAccrual {
  id              String   @id @default(cuid())
  employeeId      String
  year            Int
  month           Int      // 1-12
  casualLeave     Float    @default(0)  // CL accrued this month
  privilegeLeave  Float    @default(0)  // PL accrued this month
  proRated        Boolean  @default(false) // If joining mid-month
  joiningDate     DateTime?
  processedAt     DateTime @default(now())
  status          String   @default("PROCESSED") // PROCESSED, PENDING, FAILED

  // Relations
  employee        User     @relation("MonthlyAccruals", fields: [employeeId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([employeeId, year, month])
  @@map("monthly_accruals")
}

// Leave Accrual Rules Model
model LeaveAccrualRule {
  id                String   @id @default(cuid())
  region            String   // INDIA, USA
  leaveType         String
  monthlyAccrual    Float    // Amount credited per month
  joiningDayProRate Boolean  @default(true) // Pro-rate based on joining day
  carryForwardRules String   // JSON: rules for carry forward
  expiryRules       String   // JSON: rules for expiry
  isActive          Boolean  @default(true)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([region, leaveType])
  @@map("leave_accrual_rules")
}

// Comp Off Work Log Model - Track weekend/holiday work for comp off eligibility
model CompOffWorkLog {
  id              String   @id @default(cuid())
  employeeId      String
  workDate        DateTime
  hoursWorked     Float    // Actual hours worked
  workType        String   // WEEKEND, HOLIDAY, EXTENDED_HOURS
  workDescription String   // Description of work performed
  projectDetails  String?  // Project or task details
  isVerified      Boolean  @default(false) // Manager verification
  verifiedBy      String?  // Manager who verified
  verifiedAt      DateTime?
  compOffEarned   Float    @default(0) // Comp off days earned (calculated)
  status          String   @default("PENDING") // PENDING, VERIFIED, REJECTED, CONSUMED

  // Relations
  employee        User     @relation("CompOffWorkLogs", fields: [employeeId], references: [id])
  verifier        User?    @relation("CompOffVerifications", fields: [verifiedBy], references: [id])
  compOffRequests CompOffRequest[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("comp_off_work_logs")
}

// Comp Off Request Model - Comprehensive comp off leave requests
model CompOffRequest {
  id                String   @id @default(cuid())
  employeeId        String
  workLogId         String   // Reference to the work log that earned this comp off
  hoursToRedeem     Float    // Hours being redeemed for comp off
  daysRequested     Float    // Calculated comp off days (based on policy)
  startDate         DateTime
  endDate           DateTime
  reason            String
  isHalfDay         Boolean  @default(false)
  status            String   @default("PENDING") // PENDING, APPROVED, REJECTED, EXPIRED
  appliedDate       DateTime @default(now())
  approvedDate      DateTime?
  expiryDate        DateTime // 3 months from approval date
  isExpired         Boolean  @default(false)

  // Relations
  employee          User     @relation("CompOffRequests", fields: [employeeId], references: [id])
  workLog           CompOffWorkLog @relation(fields: [workLogId], references: [id])
  approvals         CompOffApproval[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("comp_off_requests")
}

// Comp Off Approval Model - Multi-level approval for comp off requests
model CompOffApproval {
  id              String   @id @default(cuid())
  compOffRequestId String
  approverId      String
  level           Int      @default(1)
  status          String   @default("PENDING") // PENDING, APPROVED, REJECTED
  comments        String?
  approvedAt      DateTime?

  // Relations
  compOffRequest  CompOffRequest @relation(fields: [compOffRequestId], references: [id])
  approver        User     @relation("CompOffApprovals", fields: [approverId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([compOffRequestId, level])
  @@map("comp_off_approvals")
}

// Comp Off Balance Model - Track available comp off balance per employee
model CompOffBalance {
  id              String   @id @default(cuid())
  employeeId      String
  year            Int
  totalEarned     Float    @default(0) // Total comp off days earned
  totalUsed       Float    @default(0) // Total comp off days used
  available       Float    @default(0) // Available comp off days
  expired         Float    @default(0) // Expired comp off days

  // Relations
  employee        User     @relation("CompOffBalances", fields: [employeeId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([employeeId, year])
  @@map("comp_off_balances")
}

// System Configuration Model - Store configurable options
model SystemConfiguration {
  id          String   @id @default(cuid())
  category    String   // DEPARTMENT, LOCATION, GENDER, MARITAL_STATUS, DESIGNATION, COUNTRY
  value       String   // The actual value (e.g., 'Engineering', 'New York')
  displayName String   // User-friendly display name
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0) // For ordering options
  metadata    String?  // JSON string for additional properties

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, value])
  @@index([category])
  @@index([isActive])
  @@map("system_configurations")
}