generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                     @id @default(cuid())
  employeeId            String                     @unique
  email                 String                     @unique
  password              String
  firstName             String
  lastName              String
  role                  String                     @default("EMPLOYEE")
  department            String
  location              String
  reportingManagerId    String?
  joiningDate           DateTime                   @default(now())
  status                String                     @default("ACTIVE")
  lastLogin             DateTime?
  gender                String?
  maritalStatus         String?
  country               String?
  designation           String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  approvals             Approval[]
  auditLogs             AuditLog[]
  automationRules       AutomationRule[]
  calendarIntegrations  CalendarIntegration[]
  compOffApprovals      CompOffApproval[]          @relation("CompOffApprovals")
  compOffBalances       CompOffBalance[]           @relation("CompOffBalances")
  compOffRequests       CompOffRequest[]           @relation("CompOffRequests")
  compOffWorkLogs       CompOffWorkLog[]           @relation("CompOffWorkLogs")
  compOffVerifications  CompOffWorkLog[]           @relation("CompOffVerifications")
  managedDepartment     Department[]               @relation("DepartmentManager")
  leaveBalances         LeaveBalance[]
  cancellationApprovals LeaveCancellationRequest[] @relation("CancellationApprovals")
  cancellationRequests  LeaveCancellationRequest[] @relation("CancellationRequests")
  delegationsReceived   LeaveDelegation[]          @relation("DelegationsReceived")
  delegationsGiven      LeaveDelegation[]          @relation("DelegationsGiven")
  leaveDrafts           LeaveDraft[]
  modificationApprovals LeaveModificationRequest[] @relation("ModificationApprovals")
  modificationRequests  LeaveModificationRequest[] @relation("ModificationRequests")
  leaveRequests         LeaveRequest[]
  leaveTemplates        LeaveTemplate[]
  monthlyAccruals       MonthlyAccrual[]           @relation("MonthlyAccruals")
  notifications         Notification[]
  reportingManager      User?                      @relation("UserHierarchy", fields: [reportingManagerId], references: [id])
  directReports         User[]                     @relation("UserHierarchy")

  @@index([reportingManagerId])
  @@index([role])
  @@index([location])
  @@index([department])
  @@map("users")
}

model Department {
  id                 String       @id @default(cuid())
  name               String
  managerId          String?
  parentDepartmentId String?
  location           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  manager            User?        @relation("DepartmentManager", fields: [managerId], references: [id])
  parentDepartment   Department?  @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  childDepartments   Department[] @relation("DepartmentHierarchy")

  @@index([managerId], map: "departments_managerId_fkey")
  @@index([parentDepartmentId], map: "departments_parentDepartmentId_fkey")
  @@map("departments")
}

model LeaveRequest {
  id                     String                     @id @default(cuid())
  employeeId             String
  leaveType              String
  startDate              DateTime
  endDate                DateTime
  totalDays              Float
  isHalfDay              Boolean                    @default(false)
  halfDayPeriod          String?
  reason                 String
  attachments            String?
  status                 String                     @default("PENDING")
  appliedDate            DateTime                   @default(now())
  googleCalendarEventId  String?
  outlookCalendarEventId String?
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  approvals              Approval[]
  cancellationRequests   LeaveCancellationRequest[]
  modificationRequests   LeaveModificationRequest[]
  employee               User                       @relation(fields: [employeeId], references: [id])

  @@index([status])
  @@index([appliedDate])
  @@index([employeeId, status])
  @@index([leaveType])
  @@index([startDate, endDate])
  @@map("leave_requests")
}

model LeaveDraft {
  id                String    @id @default(cuid())
  employeeId        String
  leaveType         String?
  startDate         DateTime?
  endDate           DateTime?
  totalDays         Float?
  isHalfDay         Boolean?  @default(false)
  halfDayPeriod     String?
  reason            String?
  attachments       String?
  completionPercent Int       @default(0)
  lastSavedAt       DateTime  @default(now())
  expiresAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  employee          User      @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([lastSavedAt])
  @@index([expiresAt])
  @@map("leave_drafts")
}

model LeaveDelegation {
  id          String    @id @default(cuid())
  delegatorId String
  delegateeId String
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      String    @default("ACTIVE")
  revokedAt   DateTime?
  revokedBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  delegatee   User      @relation("DelegationsReceived", fields: [delegateeId], references: [id], onDelete: Cascade)
  delegator   User      @relation("DelegationsGiven", fields: [delegatorId], references: [id], onDelete: Cascade)

  @@index([delegatorId])
  @@index([delegateeId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("leave_delegations")
}

model Approval {
  id             String       @id @default(cuid())
  leaveRequestId String
  approverId     String
  level          Int          @default(1)
  status         String       @default("PENDING")
  comments       String?
  approvedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  approver       User         @relation(fields: [approverId], references: [id])
  leaveRequest   LeaveRequest @relation(fields: [leaveRequestId], references: [id])

  @@unique([leaveRequestId, level])
  @@index([status])
  @@index([approverId, status])
  @@map("approvals")
}

model LeaveBalance {
  id               String   @id @default(cuid())
  employeeId       String
  leaveType        String
  totalEntitlement Float
  used             Float    @default(0)
  available        Float
  carryForward     Float    @default(0)
  year             Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  employee         User     @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, leaveType, year])
  @@index([employeeId])
  @@index([leaveType])
  @@index([year])
  @@map("leave_balances")
}

model LeavePolicy {
  id                     String    @id @default(cuid())
  name                   String
  leaveType              String
  entitlementDays        Float
  accrualRate            Float     @default(1)
  maxCarryForward        Float     @default(0)
  minimumGap             Int       @default(0)
  maxConsecutiveDays     Int       @default(365)
  requiresDocumentation  Boolean   @default(false)
  documentationThreshold Int       @default(0)
  location               String
  region                 String    @default("INDIA")
  effectiveFrom          DateTime
  effectiveTo            DateTime?
  isActive               Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@map("leave_policies")
}

model Holiday {
  id         String   @id @default(cuid())
  name       String
  date       DateTime
  location   String
  region     String   @default("INDIA")
  isOptional Boolean  @default(false)
  type       String   @default("COMPANY")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("holidays")
}

model LeaveTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   @default("PERSONAL")
  leaveType   String
  duration    Int?
  reason      String
  isHalfDay   Boolean  @default(false)
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdBy   String
  tags        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [createdBy], references: [id])

  @@index([createdBy], map: "leave_templates_createdBy_fkey")
  @@map("leave_templates")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "notifications_userId_fkey")
  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  entity    String
  entityId  String
  action    String
  oldValues String?
  newValues String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "audit_logs_userId_fkey")
  @@map("audit_logs")
}

model RegionalPolicy {
  id          String   @id @default(cuid())
  region      String
  state       String?
  policyRules String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("regional_policies")
}

model AutomationRule {
  id                String          @id @default(cuid())
  name              String
  description       String?
  enabled           Boolean         @default(true)
  priority          Int             @default(1)
  triggerType       String
  triggerConditions String
  actions           String
  validationRules   String?
  createdBy         String
  lastExecuted      DateTime?
  executionCount    Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  creator           User            @relation(fields: [createdBy], references: [id])
  executions        RuleExecution[]

  @@index([createdBy], map: "automation_rules_createdBy_fkey")
  @@map("automation_rules")
}

model RuleExecution {
  id              String         @id @default(cuid())
  ruleId          String
  triggerContext  String
  result          String
  success         Boolean
  executionTime   Int
  actionsExecuted String
  errors          String?
  createdAt       DateTime       @default(now())
  rule            AutomationRule @relation(fields: [ruleId], references: [id])

  @@index([ruleId], map: "rule_executions_ruleId_fkey")
  @@map("rule_executions")
}

model LeaveCancellationRequest {
  id                 String       @id @default(cuid())
  leaveRequestId     String
  employeeId         String
  cancellationReason String
  status             String       @default("PENDING")
  appliedDate        DateTime     @default(now())
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  approver           User?        @relation("CancellationApprovals", fields: [approvedBy], references: [id])
  employee           User         @relation("CancellationRequests", fields: [employeeId], references: [id])
  leaveRequest       LeaveRequest @relation(fields: [leaveRequestId], references: [id])

  @@index([approvedBy], map: "leave_cancellation_requests_approvedBy_fkey")
  @@index([employeeId], map: "leave_cancellation_requests_employeeId_fkey")
  @@index([leaveRequestId], map: "leave_cancellation_requests_leaveRequestId_fkey")
  @@map("leave_cancellation_requests")
}

model LeaveModificationRequest {
  id                 String       @id @default(cuid())
  originalLeaveId    String
  employeeId         String
  newStartDate       DateTime?
  newEndDate         DateTime?
  newLeaveType       String?
  newReason          String?
  modificationReason String
  status             String       @default("PENDING")
  appliedDate        DateTime     @default(now())
  approvedBy         String?
  approvedAt         DateTime?
  rejectionReason    String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  approver           User?        @relation("ModificationApprovals", fields: [approvedBy], references: [id])
  employee           User         @relation("ModificationRequests", fields: [employeeId], references: [id])
  originalLeave      LeaveRequest @relation(fields: [originalLeaveId], references: [id])

  @@index([approvedBy], map: "leave_modification_requests_approvedBy_fkey")
  @@index([employeeId], map: "leave_modification_requests_employeeId_fkey")
  @@index([originalLeaveId], map: "leave_modification_requests_originalLeaveId_fkey")
  @@map("leave_modification_requests")
}

model CalendarIntegration {
  id           String   @id @default(cuid())
  userId       String
  provider     String
  accessToken  String
  refreshToken String?
  calendarId   String?
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, provider], name: "userId_provider")
  @@map("calendar_integrations")
}

model MonthlyAccrual {
  id             String    @id @default(cuid())
  employeeId     String
  year           Int
  month          Int
  casualLeave    Float     @default(0)
  privilegeLeave Float     @default(0)
  proRated       Boolean   @default(false)
  joiningDate    DateTime?
  processedAt    DateTime  @default(now())
  status         String    @default("PROCESSED")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  employee       User      @relation("MonthlyAccruals", fields: [employeeId], references: [id])

  @@unique([employeeId, year, month])
  @@map("monthly_accruals")
}

model LeaveAccrualRule {
  id                String   @id @default(cuid())
  region            String
  leaveType         String
  monthlyAccrual    Float
  joiningDayProRate Boolean  @default(true)
  carryForwardRules String
  expiryRules       String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([region, leaveType])
  @@map("leave_accrual_rules")
}

model CompOffWorkLog {
  id              String           @id @default(cuid())
  employeeId      String
  workDate        DateTime
  hoursWorked     Float
  workType        String
  workDescription String
  projectDetails  String?
  isVerified      Boolean          @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  compOffEarned   Float            @default(0)
  status          String           @default("PENDING")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  compOffRequests CompOffRequest[]
  employee        User             @relation("CompOffWorkLogs", fields: [employeeId], references: [id])
  verifier        User?            @relation("CompOffVerifications", fields: [verifiedBy], references: [id])

  @@index([employeeId], map: "comp_off_work_logs_employeeId_fkey")
  @@index([verifiedBy], map: "comp_off_work_logs_verifiedBy_fkey")
  @@map("comp_off_work_logs")
}

model CompOffRequest {
  id            String            @id @default(cuid())
  employeeId    String
  workLogId     String
  hoursToRedeem Float
  daysRequested Float
  startDate     DateTime
  endDate       DateTime
  reason        String
  isHalfDay     Boolean           @default(false)
  status        String            @default("PENDING")
  appliedDate   DateTime          @default(now())
  approvedDate  DateTime?
  expiryDate    DateTime
  isExpired     Boolean           @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  approvals     CompOffApproval[]
  employee      User              @relation("CompOffRequests", fields: [employeeId], references: [id])
  workLog       CompOffWorkLog    @relation(fields: [workLogId], references: [id])

  @@index([employeeId], map: "comp_off_requests_employeeId_fkey")
  @@index([workLogId], map: "comp_off_requests_workLogId_fkey")
  @@map("comp_off_requests")
}

model CompOffApproval {
  id               String         @id @default(cuid())
  compOffRequestId String
  approverId       String
  level            Int            @default(1)
  status           String         @default("PENDING")
  comments         String?
  approvedAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  approver         User           @relation("CompOffApprovals", fields: [approverId], references: [id])
  compOffRequest   CompOffRequest @relation(fields: [compOffRequestId], references: [id])

  @@unique([compOffRequestId, level])
  @@index([approverId], map: "comp_off_approvals_approverId_fkey")
  @@map("comp_off_approvals")
}

model CompOffBalance {
  id          String   @id @default(cuid())
  employeeId  String
  year        Int
  totalEarned Float    @default(0)
  totalUsed   Float    @default(0)
  available   Float    @default(0)
  expired     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    User     @relation("CompOffBalances", fields: [employeeId], references: [id])

  @@unique([employeeId, year])
  @@map("comp_off_balances")
}

model SystemConfiguration {
  id          String   @id @default(cuid())
  category    String
  value       String
  displayName String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  metadata    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([category, value])
  @@index([category])
  @@index([isActive])
  @@map("system_configurations")
}

model LeaveTypeConfiguration {
  id                       String   @id @default(cuid())
  leaveTypeCode            String   @unique
  displayName              String
  description              String?
  region                   String
  isActive                 Boolean  @default(true)
  sortOrder                Int      @default(0)
  defaultEntitlement       Float    @default(0)
  allowNegativeBalance     Boolean  @default(false)
  negativeBalanceLimit     Float    @default(0)
  requiresDocumentation    Boolean  @default(false)
  documentationThreshold   Int      @default(0)
  eligibilityCriteria      String?  @db.Text
  minimumAdvanceNoticeDays Int      @default(0)
  maxFutureBookingDays     Int      @default(365)
  minimumGapDays           Int      @default(0)
  maxConsecutiveDays       Int      @default(365)
  allowBackdatedLeave      Boolean  @default(false)
  backdatedLimitDays       Int      @default(0)
  allowFullDay             Boolean  @default(true)
  allowHalfDay             Boolean  @default(true)
  allowQuarterDay          Boolean  @default(false)
  allowHourly              Boolean  @default(false)
  colorCode                String   @default("#3B82F6")
  icon                     String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([region])
  @@index([isActive])
  @@map("leave_type_configurations")
}

model DashboardConfiguration {
  id             String   @id @default(cuid())
  userId         String?
  role           String?
  isDefault      Boolean  @default(false)
  name           String
  description    String?
  layoutConfig   String   @db.Text
  colorScheme    String   @default("LIGHT")
  primaryColor   String   @default("#3B82F6")
  accentColor    String   @default("#10B981")
  defaultView    String   @default("GRID")
  compactMode    Boolean  @default(false)
  showAnimations Boolean  @default(true)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([role])
  @@index([isDefault])
  @@map("dashboard_configurations")
}

model WidgetDefinition {
  id                     String   @id @default(cuid())
  widgetType             String   @unique
  displayName            String
  description            String?
  category               String
  icon                   String?
  defaultWidth           Int      @default(4)
  defaultHeight          Int      @default(3)
  minWidth               Int      @default(2)
  minHeight              Int      @default(2)
  maxWidth               Int      @default(12)
  maxHeight              Int      @default(8)
  configurableProperties String?
  dataSourceEndpoint     String?
  refreshIntervalSeconds Int      @default(0)
  requiredPermissions    String?
  allowedRoles           String?
  isCustom               Boolean  @default(false)
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([category])
  @@index([isActive])
  @@map("widget_definitions")
}

model BulkActionConfiguration {
  id                    String   @id @default(cuid())
  actionType            String   @unique
  enabled               Boolean  @default(true)
  allowedRoles          String
  maxItemsPerAction     Int      @default(100)
  requiresConfirmation  Boolean  @default(true)
  requiresReason        Boolean  @default(false)
  validationRules       String?  @db.Text
  confirmationConfig    String?  @db.Text
  auditConfig           String   @db.Text
  executionMode         String   @default("SYNCHRONOUS")
  batchSize             Int      @default(50)
  timeoutSeconds        Int      @default(300)
  allowRollback         Boolean  @default(false)
  rollbackWindowMinutes Int      @default(60)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([enabled])
  @@map("bulk_action_configurations")
}

model WorkflowConfiguration {
  id                String   @id @default(cuid())
  workflowType      String
  name              String
  description       String?
  isDefault         Boolean  @default(false)
  priority          Int      @default(0)
  conditions        String?  @db.Text
  steps             String   @db.Text
  autoApprovalRules String?  @db.Text
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([workflowType])
  @@index([isDefault])
  @@index([isActive])
  @@map("workflow_configurations")
}

model LeaveApplicationFieldConfig {
  id                   String   @id @default(cuid())
  leaveTypeCode        String
  fieldName            String
  displayLabel         String
  fieldType            String
  isMandatory          Boolean  @default(false)
  conditionalMandatory String?  @db.Text
  validationRules      String?  @db.Text
  helpText             String?
  placeholder          String?
  defaultValue         String?
  sortOrder            Int      @default(0)
  visibleToRoles       String
  editableByRoles      String
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([leaveTypeCode, fieldName])
  @@index([leaveTypeCode])
  @@map("leave_application_field_configs")
}

model LeaveDurationConfiguration {
  id                 String   @id @default(cuid())
  region             String   @unique
  fullDayEnabled     Boolean  @default(true)
  fullDayHours       Float    @default(8)
  halfDayEnabled     Boolean  @default(true)
  halfDayHours       Float    @default(4)
  halfDaySlots       String?  @db.Text
  quarterDayEnabled  Boolean  @default(false)
  quarterDayHours    Float    @default(2)
  quarterDaySlots    String?  @db.Text
  hourlyEnabled      Boolean  @default(false)
  minimumHours       Float    @default(1)
  maximumHours       Float    @default(8)
  allowedLeaveTypes  String?  @db.Text
  allowMixedDuration Boolean  @default(false)
  roundingMethod     String   @default("NEAREST")
  roundingPrecision  Float    @default(0.5)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("leave_duration_configurations")
}

model TeamCalendarConfiguration {
  id                      String   @id @default(cuid())
  department              String?
  teamDefinitionType      String   @default("REPORTING_HIERARCHY")
  includeSubordinates     Boolean  @default(true)
  subordinateDepth        Int      @default(2)
  displayConfig           String   @db.Text
  overlapEnabled          Boolean  @default(false)
  overlapCalculation      String   @default("PERCENTAGE")
  overlapThreshold        Float    @default(20)
  excludeLeaveTypes       String?  @db.Text
  minimumTeamSize         Int      @default(2)
  overlapActions          String   @db.Text
  externalCalendarEnabled Boolean  @default(false)
  syncProviders           String?  @db.Text
  syncFrequencyMinutes    Int      @default(30)
  showEmployeeNames       Boolean  @default(true)
  showLeaveTypes          Boolean  @default(true)
  showLeaveDuration       Boolean  @default(true)
  showLeaveReason         Boolean  @default(false)
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([department])
  @@map("team_calendar_configurations")
}

model LeaveBalanceVisibilityConfig {
  id                         String   @id @default(cuid())
  role                       String   @unique
  canViewOwnBalance          Boolean  @default(true)
  canViewTeamBalance         Boolean  @default(false)
  canViewDepartmentBalance   Boolean  @default(false)
  canViewOrganizationBalance Boolean  @default(false)
  canViewBalanceHistory      Boolean  @default(false)
  canViewProjectedBalance    Boolean  @default(false)
  canExportBalances          Boolean  @default(false)
  displayOptions             String   @db.Text
  alertConfig                String?  @db.Text
  isActive                   Boolean  @default(true)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  @@map("leave_balance_visibility_configs")
}

model UsaPtoPolicy {
  id                   String    @id @default(cuid())
  designation          String    @unique
  annualPtoDays        Float
  accrualFrequency     String    @default("YEARLY")
  accrualRate          Float
  maxCarryForward      Float     @default(5)
  carryForwardExpiry   Int       @default(90)
  proRataCalculation   Boolean   @default(true)
  minimumServiceMonths Int       @default(0)
  isActive             Boolean   @default(true)
  effectiveFrom        DateTime  @default(now())
  effectiveTo          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([isActive])
  @@map("usa_pto_policies")
}

model UsaPtoAccrual {
  id                 String   @id @default(cuid())
  employeeId         String
  year               Int
  month              Int?
  designation        String
  accrualAmount      Float
  carryForwardAmount Float    @default(0)
  totalAvailable     Float
  used               Float    @default(0)
  balance            Float
  proRated           Boolean  @default(false)
  proRataMonths      Int?
  status             String   @default("PROCESSED")
  notes              String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([employeeId, year, month])
  @@index([employeeId])
  @@index([year])
  @@index([status])
  @@map("usa_pto_accruals")
}

model UsaPtoCarryForward {
  id          String   @id @default(cuid())
  employeeId  String
  fromYear    Int
  toYear      Int
  carriedDays Float
  expiryDate  DateTime
  used        Float    @default(0)
  expired     Float    @default(0)
  remaining   Float
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([employeeId, fromYear, toYear])
  @@index([employeeId])
  @@index([status])
  @@index([expiryDate])
  @@map("usa_pto_carry_forwards")
}

model LeaveAnalytics {
  id                        String   @id @default(cuid())
  reportDate                DateTime @default(now())
  reportType                String
  department                String?
  location                  String?
  region                    String?
  totalLeaveRequests        Int      @default(0)
  approvedLeaves            Int      @default(0)
  rejectedLeaves            Int      @default(0)
  pendingLeaves             Int      @default(0)
  cancelledLeaves           Int      @default(0)
  totalLeaveDays            Float    @default(0)
  averageLeaveDuration      Float    @default(0)
  leaveTypeBreakdown        String   @db.Text
  totalWorkingDays          Int      @default(0)
  totalAbsentDays           Float    @default(0)
  absenteeismRate           Float    @default(0)
  employeeCount             Int      @default(0)
  averageAbsencePerEmployee Float    @default(0)
  peakLeaveMonth            String?
  peakLeaveDays             Float    @default(0)
  peakLeaveWeek             String?
  teamSize                  Int      @default(0)
  teamAvailability          Float    @default(100)
  criticalCoverageAlerts    Int      @default(0)
  generatedAt               DateTime @default(now())
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([reportDate])
  @@index([reportType])
  @@index([department])
  @@index([region])
  @@map("leave_analytics")
}

model DepartmentLeaveStats {
  id                          String   @id @default(cuid())
  department                  String
  month                       Int
  year                        Int
  totalEmployees              Int      @default(0)
  leavesThisMonth             Int      @default(0)
  totalLeaveDays              Float    @default(0)
  averageLeaveDaysPerEmployee Float    @default(0)
  casualLeaves                Int      @default(0)
  sickLeaves                  Int      @default(0)
  earnedLeaves                Int      @default(0)
  maternityLeaves             Int      @default(0)
  paternityLeaves             Int      @default(0)
  unpaidLeaves                Int      @default(0)
  monthOverMonthChange        Float    @default(0)
  yearOverYearChange          Float    @default(0)
  absenteeismTrend            String   @default("STABLE")
  nextMonthForecast           String?  @db.Text
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@unique([department, year, month])
  @@index([department])
  @@index([year, month])
  @@map("department_leave_stats")
}

model LeavePatternAnalysis {
  id              String   @id @default(cuid())
  employeeId      String?
  patternType     String
  patternData     String   @db.Text
  occurrenceCount Int      @default(0)
  confidence      Float    @default(0)
  analyzedFrom    DateTime
  analyzedTo      DateTime
  recommendation  String?  @db.Text
  riskLevel       String   @default("LOW")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([employeeId])
  @@index([patternType])
  @@index([confidence])
  @@map("leave_pattern_analysis")
}

model TeamAvailabilityForecast {
  id                 String   @id @default(cuid())
  department         String
  forecastDate       DateTime
  totalTeamSize      Int
  projectedAbsent    Int
  projectedAvailable Int
  availabilityRate   Float
  riskLevel          String   @default("LOW")
  criticalRoles      String?  @db.Text
  recommendations    String?  @db.Text
  confidenceScore    Float    @default(0)
  modelVersion       String   @default("1.0")
  generatedAt        DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([department])
  @@index([forecastDate])
  @@index([riskLevel])
  @@map("team_availability_forecasts")
}
