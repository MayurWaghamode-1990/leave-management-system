name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 4 AM
    - cron: '0 4 * * *'

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Start frontend server
        run: cd frontend && npm run preview &

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3001/health
          npx wait-on http://localhost:4173

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadDir: './lighthouse-reports'
          temporaryPublicStorage: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: lighthouse-reports/

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Wait for backend
        run: npx wait-on http://localhost:3001/health

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          cd tests/performance
          k6 run --out json=results.json load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: tests/performance/results.json

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('tests/performance/results.json')) {
              const results = JSON.parse(fs.readFileSync('tests/performance/results.json', 'utf8'));
              const metrics = results.metrics;

              const comment = `## ⚡ Performance Test Results

              ### Load Test Metrics
              - **Average Response Time**: ${metrics.http_req_duration?.med || 'N/A'}ms
              - **95th Percentile**: ${metrics.http_req_duration?.['p(95)'] || 'N/A'}ms
              - **Requests per Second**: ${metrics.http_reqs?.rate || 'N/A'}
              - **Failed Requests**: ${metrics.http_req_failed?.rate || 'N/A'}%

              ### Thresholds
              ${metrics.http_req_duration?.med > 500 ? '❌' : '✅'} Response time median < 500ms
              ${metrics.http_req_duration?.['p(95)'] > 1000 ? '❌' : '✅'} Response time 95th percentile < 1000ms
              ${metrics.http_req_failed?.rate > 0.1 ? '❌' : '✅'} Error rate < 10%
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Analyze bundle size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          pattern: "./frontend/dist/**/*.{js,css}"
          strip-hash: "\\b\\w{8}\\."

  database-performance:
    name: Database Performance Testing
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Setup test database
        run: |
          cd backend
          cp .env.example .env.test
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Run database performance tests
        run: cd backend && npm run test:db-performance
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Upload DB performance results
        uses: actions/upload-artifact@v4
        with:
          name: db-performance-results
          path: backend/test-results/db-performance.json

  memory-profiling:
    name: Memory Usage Profiling
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Run memory profiling
        run: |
          cd backend
          node --max-old-space-size=512 --expose-gc src/server.js &
          SERVER_PID=$!
          sleep 30

          # Simulate load and measure memory
          for i in {1..10}; do
            curl -s http://localhost:3001/health > /dev/null
            sleep 1
          done

          # Get memory usage
          ps -p $SERVER_PID -o pid,vsz,rss,comm > memory-usage.log
          kill $SERVER_PID
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Upload memory profiling results
        uses: actions/upload-artifact@v4
        with:
          name: memory-profiling-results
          path: backend/memory-usage.log