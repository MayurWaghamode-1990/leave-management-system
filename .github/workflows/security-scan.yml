name: Security Scanning

on:
  schedule:
    # Run security scans daily at 3 AM
    - cron: '0 3 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=moderate --json > backend-audit.json || true

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > frontend-audit.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: audit-results
          path: |
            backend/backend-audit.json
            frontend/frontend-audit.json

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
            p/react
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t lms-backend:test ./backend
          docker build -t lms-frontend:test ./frontend

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lms-backend:test'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'lms-frontend:test'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '.'

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check backend licenses
        run: |
          cd backend
          license-checker --json > backend-licenses.json

      - name: Check frontend licenses
        run: |
          cd frontend
          license-checker --json > frontend-licenses.json

      - name: Upload license results
        uses: actions/upload-artifact@v4
        with:
          name: license-results
          path: |
            backend/backend-licenses.json
            frontend/frontend-licenses.json

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-scan, license-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md

          echo "## Dependency Scan Results" >> security-report.md
          if [ -f audit-results/backend-audit.json ]; then
            echo "### Backend Dependencies" >> security-report.md
            cat audit-results/backend-audit.json | jq '.vulnerabilities | length' || echo "No vulnerabilities file found"
          fi

          if [ -f audit-results/frontend-audit.json ]; then
            echo "### Frontend Dependencies" >> security-report.md
            cat audit-results/frontend-audit.json | jq '.vulnerabilities | length' || echo "No vulnerabilities file found"
          fi

          echo "" >> security-report.md
          echo "## License Compliance" >> security-report.md
          if [ -f license-results/backend-licenses.json ]; then
            echo "### Backend Licenses" >> security-report.md
            cat license-results/backend-licenses.json | jq 'keys | length' || echo "No license file found"
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-report.md')) {
              const report = fs.readFileSync('security-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ”’ Security Scan Report\n\n${report}`
              });
            }