name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run ESLint (Backend)
        run: cd backend && npm run lint

      - name: Run ESLint (Frontend)
        run: cd frontend && npm run lint

      - name: Run Prettier check
        run: |
          cd backend && npm run format:check
          cd ../frontend && npm run format:check

      - name: TypeScript check (Backend)
        run: cd backend && npm run type-check

      - name: TypeScript check (Frontend)
        run: cd frontend && npm run type-check

      - name: Security audit
        run: |
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Setup test database
        run: |
          cd backend
          cp .env.example .env.test
          sed -i 's/localhost:3306/localhost:3306/g' .env.test
          sed -i 's/leave_management_db/test_db/g' .env.test
          sed -i 's/lms_user/test_user/g' .env.test
          sed -i 's/password123/test_password/g' .env.test

      - name: Generate Prisma client
        run: cd backend && npx prisma generate

      - name: Run database migrations
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Run unit tests
        run: cd backend && npm run test
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db
          REDIS_URL: redis://localhost:6379

      - name: Generate test coverage
        run: cd backend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run unit tests
        run: cd frontend && npm run test

      - name: Run component tests
        run: cd frontend && npm run test:component

      - name: Generate test coverage
        run: cd frontend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Start backend server
        run: cd backend && npm start &
        env:
          NODE_ENV: test
          DATABASE_URL: mysql://test_user:test_password@localhost:3306/test_db

      - name: Wait for backend
        run: npx wait-on http://localhost:3001/health

      - name: Run E2E tests
        run: cd frontend && npm run test:e2e
        env:
          VITE_API_URL: http://localhost:3001/api/v1

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: frontend/test-results/

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' || github.event_name == 'release'

    outputs:
      backend-version: ${{ steps.backend-version.outputs.version }}
      frontend-version: ${{ steps.frontend-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci --production
          cd ../frontend && npm ci

      - name: Build backend
        run: cd backend && npm run build

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Get backend version
        id: backend-version
        run: echo "version=$(cd backend && node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Get frontend version
        id: frontend-version
        run: echo "version=$(cd frontend && node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            backend/dist/
            backend/package.json
            backend/package-lock.json
            backend/prisma/

      - name: Create frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

  # Docker Build and Push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '.'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster lms-staging \
            --service lms-backend-staging \
            --force-new-deployment

          aws ecs update-service \
            --cluster lms-staging \
            --service lms-frontend-staging \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster lms-staging \
            --services lms-backend-staging lms-frontend-staging

      - name: Run smoke tests
        run: |
          curl -f https://staging.your-domain.com/health
          curl -f https://staging.your-domain.com/api/v1/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker-build, security-scan]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to ECS Production
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster lms-production \
            --service lms-backend-production \
            --force-new-deployment

          aws ecs update-service \
            --cluster lms-production \
            --service lms-frontend-production \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster lms-production \
            --services lms-backend-production lms-frontend-production

      - name: Run production smoke tests
        run: |
          curl -f https://your-domain.com/health
          curl -f https://your-domain.com/api/v1/health

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 LMS v${{ github.event.release.tag_name }} deployed to production successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Delete old container images
        run: |
          # Keep only last 10 images
          IMAGE_TAGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${{ env.IMAGE_NAME }}-backend/versions" | \
            jq -r '.[10:] | .[].id')

          for tag in $IMAGE_TAGS; do
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/user/packages/container/${{ env.IMAGE_NAME }}-backend/versions/$tag"
          done